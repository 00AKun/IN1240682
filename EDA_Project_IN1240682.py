# -*- coding: utf-8 -*-
"""EDA Project_IN1240682.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o9ixz173ZkzfZUsSsiNPbq65O6hMmUug

***`Data Cleaning`***
"""

import pandas as pd

# Read the CSV file
data = pd.read_csv('data.csv')

# Check for missing values
missing_values = data.isnull().sum()
print("Missing Values:")
print(missing_values)

# Check for outliers and anomalies in continuous variables
continuous_variables = ['Salary', '10percentage', '12percentage']

for variable in continuous_variables:
    # Calculate the z-score for each value in the variable
    z_scores = (data[variable] - data[variable].mean()) / data[variable].std()

    # Identify outliers using a threshold (e.g., z-score > 3 or < -3)
    outliers = data[variable][(z_scores > 3) | (z_scores < -3)]

    print(f"Outliers in {variable}:")
    print(outliers)

    # Remove outliers from the dataset
    data = data.drop(outliers.index)

# Save the cleaned data to a new CSV file
data.to_csv('cleaned_data.csv', index=False)

"""***`Data Manipultion`***"""

import pandas as pd

# Import the dataset
data = pd.read_csv("cleaned_data.csv")

# Display the head of the data
print(data.head())

# Display the shape of the data
print("Shape of the data:", data.shape)

# Display the description of the data
print(data.describe())

"""***`Univariate Analysis`***"""

# Importing the required libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

import plotly.express as px
import pandas as pd

# Loading the dataset
df = pd.read_csv('cleaned_data.csv')

# Numerical Columns
numerical_columns = ['Salary', '10percentage', '12percentage', 'collegeGPA', 'English', 'Logical',
                     'Quant', 'Domain', 'ComputerProgramming', 'ElectronicsAndSemicon',
                     'ComputerScience', 'MechanicalEngg', 'ElectricalEngg', 'TelecomEngg',
                     'CivilEngg', 'conscientiousness', 'agreeableness', 'extraversion',
                     'nueroticism', 'openess_to_experience']

# Categorical Columns
categorical_columns = ['Designation', 'JobCity', 'Gender', 'CollegeTier', 'Degree',
                       'Specialization', 'CollegeCityTier', 'CollegeState']

# Univariate Analysis - Numerical Columns
for column in numerical_columns:
    # Outliers
    plt.figure(figsize=(8, 4))
    sns.boxplot(data=df, y=column)
    plt.title(f'Boxplot of {column}')
    plt.show()

    # Probability Distribution
    plt.figure(figsize=(8, 4))
    sns.histplot(data=df, x=column, kde=True)
    plt.title(f'Distribution of {column}')
    plt.xlabel(column)
    plt.show()

# Iterate over each column
for column in numerical_columns:
    # Create the histogram figure
    fig = px.histogram(data, x=column, title=(f'Frequency Distribution of {column}'))
    # Show the histogram figure
    fig.show()

# Univariate Analysis - Categorical Columns
for column in categorical_columns:
    # Create the histogram figure
    fig = px.histogram(data, x=column, title=(f'Frequency Distribution of {column}'))
    # Show the histogram figure
    fig.show()

"""***`Bivariate Analysis`***"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load the dataset
data = pd.read_csv('cleaned_data.csv')

# Numerical Columns
numerical_columns = ['Salary', '10percentage', '12percentage', 'collegeGPA', 'English', 'Logical', 'Quant', 'Domain',
                     'ComputerProgramming', 'ElectronicsAndSemicon', 'ComputerScience', 'MechanicalEngg',
                     'ElectricalEngg', 'TelecomEngg', 'CivilEngg', 'conscientiousness', 'agreeableness', 'extraversion',
                     'nueroticism', 'openess_to_experience']

# Scatter plot of Salary vs 10percentage
plt.scatter(data['10percentage'], data['Salary'])
plt.xlabel('10percentage')
plt.ylabel('Salary')
plt.title('Scatter plot of Salary vs 10percentage')
plt.show()

# Hexbin plot of Salary vs CollegeGPA
sns.jointplot(data=data, x='collegeGPA', y='Salary', kind='hex')
plt.xlabel('collegeGPA')
plt.ylabel('Salary')
plt.title('Hexbin plot of Salary vs CollegeGPA')
plt.show()

# Pair plot of numerical columns
sns.pairplot(data=data[['Salary', '10percentage', '12percentage', 'collegeGPA']])
plt.title('Pair plot of numerical columns')
plt.show()

# Categorical Columns
categorical_columns = ['Designation', 'JobCity', 'Gender', 'CollegeTier', 'Degree', 'Specialization', 'CollegeCityTier',
                       'CollegeState']

# Swarm plot of Gender vs Salary
sns.stripplot(data=data, x='Gender', y='Salary')
plt.xlabel('Gender')
plt.ylabel('Salary')
plt.title('Swarm plot of Gender vs Salary')
plt.show()

# Box plot of Degree vs Salary
sns.boxplot(data=data, x='Degree', y='Salary')
plt.xlabel('Degree')
plt.ylabel('Salary')
plt.title('Box plot of Degree vs Salary')
plt.show()

# Bar plot of CollegeState vs Salary
sns.barplot(data=data, x='CollegeState', y='Salary')
plt.xlabel('CollegeState')
plt.ylabel('Salary')
plt.title('Bar plot of CollegeState vs Salary')
plt.xticks(rotation=90)
plt.show()

# Stacked bar plot of CollegeCityTier and CollegeTier
ct = pd.crosstab(data['CollegeCityTier'], data['CollegeTier'])
ct.plot(kind='bar', stacked=True)
plt.xlabel('CollegeCityTier')
plt.ylabel('Count')
plt.title('Stacked bar plot of CollegeCityTier and CollegeTier')
plt.show()

"""***`Research Questions`***"""

import pandas as pd

# Load the dataset
data = pd.read_csv('cleaned_data.csv')

# Filter the dataset for relevant job titles
relevant_jobs = ['Programming Analyst', 'Software Engineer', 'Hardware Engineer', 'Associate Engineer']
filtered_data = data[data['Designation'].isin(relevant_jobs)]

# Calculate the average salary for fresh graduates
average_salary = filtered_data[filtered_data['12graduation'] == 2015]['Salary'].mean()

# Check if the average salary falls within the mentioned range
if 250000 <= average_salary <= 300000:
    Conclusion = "The claim is supported by the data. Fresh graduates in these job roles can earn up to 2.5-3 lakhs."
else:
    Conclusion = "The claim is not supported by the data. The average salary for fresh graduates in these job roles does not fall within the mentioned range."

Conclusion

"""***`Is there a relationship between gender and specialization? (i.e. Does the preference of Specialisation depend on the Gender?)`***"""

import pandas as pd
from scipy.stats import chi2_contingency

# Read the data from the CSV file
data = pd.read_csv('cleaned_data.csv')

# Select the relevant columns for analysis
df = data[['Gender', 'Specialization']]

# Create a contingency table
contingency_table = pd.crosstab(df['Gender'], df['Specialization'])

# Perform chi-square test
chi2, p, dof, expected = chi2_contingency(contingency_table)

# Print the results
print("Chi-square test statistic:", chi2)
print("P-value:", p)

# Importing the required libraries
import pandas as pd
from scipy.stats import chi2_contingency

# Loading the dataset
data = pd.read_csv('cleaned_data.csv')

# Selecting the relevant columns for analysis
gender_specialization = data[['Gender', 'Specialization']]

# Creating a contingency table
contingency_table = pd.crosstab(gender_specialization['Gender'], gender_specialization['Specialization'])

# Performing the chi-square test
chi2, p, dof, expected = chi2_contingency(contingency_table)

# Checking the p-value
alpha = 0.05
if p < alpha:
    conclusion = "There is a significant relationship between gender and specialization."
else:
    conclusion = "There is no significant relationship between gender and specialization."

# Printing the conclusion
conclusion

import pandas as pd
import matplotlib.pyplot as plt

# Read the data from the CSV file
data = pd.read_csv('cleaned_data.csv')

# Select the relevant columns for analysis
df = data[['Gender', 'Specialization']]

# Count the number of occurrences of each specialization by gender
specialization_counts = df.groupby(['Gender', 'Specialization']).size().unstack()

# Plot the bar plot
ax = specialization_counts.plot(kind='bar', stacked=True)

# Set the plot title and labels
ax.set_title('Distribution of Specialization by Gender')
ax.set_xlabel('Gender')
ax.set_ylabel('Count')

# Adjust the position and size of the legend
ax.legend(title='Specialization', bbox_to_anchor=(1, 1), loc='upper left')

# Show the plot
plt.show()

"""***`Is there a relationship between gender and designation (i.e. Does the preference of designation depend on the Gender?) `***"""

# Importing the required libraries
import pandas as pd
from scipy.stats import chi2_contingency

# Loading the dataset
data = pd.read_csv('cleaned_data.csv')

# Selecting the relevant columns for analysis
gender_designation = data[['Gender', 'Designation']]

# Creating a contingency table
contingency_table = pd.crosstab(gender_designation['Gender'], gender_designation['Designation'])

# Performing the chi-square test
chi2, p, dof, expected = chi2_contingency(contingency_table)

# Checking the p-value
alpha = 0.05
if p < alpha:
    conclusion = "There is a significant relationship between gender and designation."
else:
    conclusion = "There is no significant relationship between gender and designation."

# Printing the conclusion
conclusion

import pandas as pd
import matplotlib.pyplot as plt

# Read the data from the CSV file
data = pd.read_csv('cleaned_data.csv')

# Select the relevant columns for analysis
df = data[['Gender', 'Designation']]

# Count the number of occurrences of each designation by gender
designation_counts = df.groupby(['Gender', 'Designation']).size().unstack()

# Plot the bar plot
ax = designation_counts.plot(kind='bar', stacked=True)

# Set the plot title and labels
ax.set_title('Distribution of Designation by Gender')
ax.set_xlabel('Gender')
ax.set_ylabel('Count')

# Adjust the position and size of the legend
ax.legend(title='Designation', bbox_to_anchor=(1, 1), loc='upper left')

# Show the plot
plt.show()